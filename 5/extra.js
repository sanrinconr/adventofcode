var real = `BFBFFFBLRL
FFBFFBFRLR
BBBFFBBRLL
FBFFBBFLRL
BFBBFFFLRR
BFBBFBFRRL
BFFBBBFRRL
BFBBFFBRRL
FFFBFBBLRR
FBBBBBBLRL
FFBBFFBRLR
FFBBFBBRLL
FBFFBFFLRL
FBFBFFBRRR
FBFBBFBRLR
FFBBFBFLRR
BFBBBBFLRL
BFFFFFFLRR
BBFFFBBRLR
BFBFBFBLRR
FFBBFFBRRR
BBFBBFBRLR
FBBFFBFRLR
FBFFFBFLRL
BFFFBFBLRR
BFFFFBFRLR
FBBFFFFRRL
BFFBBBBRRR
FBFBFFFLLR
BBBFFBFRRR
FBFBFBBLRL
FBFBBBFRLL
FBBFBFFLRL
BBBFFBFRLR
FFBBBBFLLR
BFFFBBFRLR
FFBBBFFRRR
BFFFBFFLRL
BFFBBFFRRL
FBFBFFFRLR
BBFBFBBRRL
FFBBBBFRRR
FBBBBFFRRL
FBFFFBFRRR
FBFFFBFLLR
FFBBFBBLLR
BFBFBFFLRR
FBBFBFBRRR
BBFBFFFRRL
BFFBFFBLLR
FBFBFBFRLR
BFFBBBFRRR
FBBFFFBLRL
BBFBFFBRLR
BFBBFBBRRR
FBFBFBBLRR
BBFFFBFRLR
FFBFBBFRLL
BBFFBFBRLR
FBFBFFBRRL
BFFBFBFLLR
BBBFFFBLRR
BFBBBFBRLR
BBFFFFFRRR
BFFBFFFRLL
FBBFBFBLRL
BBFFBBFLRR
BFBBFFBLRL
FFFBBFBLLR
FFBFBFBLLR
FFFBBFFRLR
BFFFFBFLLL
FFBBBBBLLR
BFFFBBFRLL
FBFBBFBRLL
BFFBBFBLRL
FBBBBFFRLL
BFBBBFFLRR
BBFBBFFRLL
FFFBBFFRRR
BBFBBFBRRR
BBFFFBFRLL
BFFBFBFLRL
FBBFBFFLRR
BBFFBBBRLR
FFFBBFBRLL
BFFBFFFLLR
FFBBBBFRLL
FFBBFFBLLR
BFFFFBBLLR
BBFBBBBRRL
BBFFBFBLRL
FFBBFBBLLL
BBFFBFFRLR
BFFFBFBRLR
BFFBBBBLLL
BFFBFFFRRR
BBFFFBBRLL
FBBBFFBLRR
FFBFFBBRLL
BFFFFFBLRL
FBFBFBFRRR
BBFFBBBLLL
BFBFBFBRRR
FBBBFFBLRL
BBBFFBFLRR
BBFFBBBRRR
FBFFFFBRLL
FBFBFBFRRL
BFBBBFFRLR
FBFFFFBRRL
BBBFBFFLLL
FFBFBFBRLL
BFBBFFFLLL
BBBFFFFLLL
BBFFFBFRRR
FFBBBBFLRL
FBFFBBFLRR
BBFBFBBRLL
BFBFBBBLRL
FFBFBBFLLR
BFFFFFBRRL
BFFBFBBRLR
BFBFFFFRLL
BFBBFFFRRL
FBBFFFFRLL
BBFBFBBLLR
FFBBBFBLRL
FBBFFFBRRL
FFBBFBBLRL
BFBFFBBLLR
BBFBFFFLLR
BBBFFFFRLR
BFBBFBFRLR
BFBBFFBRRR
BBFFBBFRRL
BBFBFFBRRL
BFFBFBFRLR
BBFBFBBRLR
FFBFBFFRRL
BFBBFBFLLL
BBFBFFFLRL
BFBBBBFLLR
BFFFFBBRRL
BBFFFFBRRL
BFFBBFBRRR
BFFBBFBLLR
BBFBBBBRLL
FBBFBFFRRR
FBFFFFBLLR
BFBFFBFRLL
FFBFFBBRRR
BFFFBFBRRR
BBBFFFBLLL
BBFFFBBRRR
FBBFFBBLLL
FBFFBBBRLL
BBFBFFFRLR
FBFFFBBRLR
FFBBBFBLLL
BFFFFBFLRR
FFFBBFBRLR
BBFFFFBLRR
FBFFBFBRRR
FBBFBBFLRL
BFBBFFBLLR
BBBFFBFLLR
BFBFFBBRRL
BFFBFBFRRL
BFFFFBFRRR
BBBFFBBRRL
FBBFFFBRRR
BFBFBFFLLL
FFBBFBFLLR
FFBFFBFLRL
BFBFFBFRRR
FBFBBBFLRL
FFFBFBBRLL
BBFBFFBRRR
FBBFBFFRRL
BBFFBFFLRR
BFBFFBBLRL
BBFFBFFLLL
BFFFBBBRRR
BBFBBBBLLL
FBBFBBBRRL
BBFBBBFLLL
BFFBFFFRRL
BFBFFFBRLR
FFBBBBFLLL
BFBFFFFRRR
FFBFBFBLRR
FBFFBFBLRL
BBFFFFBLLL
BFBBFFFLLR
FBBBBFFLLL
BFFBFBFRLL
BBBFFFBLRL
BBFBBFFLLL
FBFBFBBRRR
BBFBFFFRRR
BFBBBFBRRR
FBFFBFFRRL
FBFBBFFRRR
BFFFBBFLLR
FBFFBFBLLL
BFFFFBBLRL
FBFFFFFRRR
BFFFBFFRLR
BBFFBFFLRL
FBFFBBBLRR
FBFBFFFLRR
FFBFBFBRLR
FBFBFFFRRR
FFBFFFFLLR
BFBFFBFLRR
BFBBFBBLLL
BFFBBBFLRL
BFFBFBBLRL
BBFFBBBRLL
BFBFFFBLLL
FFFBBBBLRL
FFBFFBBLLR
BFBBBBBLRL
BFFBBFFRRR
BBFFBBFRLL
FBBBBBFLLL
BFFFBFFLRR
BFBBFFBLRR
FBFBBFFRLR
FFFBFBBRLR
BBFBFFBLRL
FFFBBBBLLR
FBBFFFBRLR
BBFBBFFLLR
FBFBFBFLLL
BFBBFFBRLL
BFBFFBFLRL
BBBFFFFRRL
BFBFFBFRRL
BBFBBBFLRL
BBFBBBBLLR
FFBFFBFRLL
FBBBFBFLLL
BBBFFFBRLR
BBFFBFFRRL
BBFBBBBRLR
BBBFFBBRRR
FBBFBFFLLR
BFBBFBFLRL
FBFBBBFRRL
BFFFBBBLRL
BBFBFBBLLL
FFFBBBBRRR
FBBBFFBRLR
FBBBFBBRLL
FBBBFFFLRL
BFFFBBBLLR
FFFBBFFLRR
BFBFBFBLLL
FFBFFBBLLL
FBBFFBFRLL
FFFBBFFRRL
BFFFBBFLRR
FBFBBBBLRL
FFBBBFFRLR
BBFBFFFLRR
BFBFBBFLLL
BFFFFFBLRR
BFBBFBFRLL
BBFFFFFLRR
BBFBBBFLRR
BFBBBBBRLL
FBBFBFFRLR
FBFBBBBLRR
FFBFBBFRLR
BFFFBBBRRL
BBFBBBBRRR
BFBBBBBRRR
BFFBFFBLRL
FFBFBFBRRL
FBBBBBBRLR
FFBFBFFRLL
FFBFFFBLRR
FFBBFFFRRR
FFBBBFBRRL
BFFFBFFRRL
BFBBFBBRLL
FFBFFBFLLL
FBBBBFBLLR
FBBBFBBLLR
FFFBFBBRRR
FBBBBFBLLL
FFBFBBFRRR
BFBBBFFRRR
FBBFBFBRLR
BFFFFBBRLR
FFBBBFBRLL
BFBFFFFLRL
BFBBFBBLLR
BFFFFFFRLL
FFFBBBBLLL
FBFFBFFLRR
FFBBFFFRRL
FFFBBBFRLL
BFBFFBFLLL
BBFBBFFLRL
BFFBBBBRLR
BBFBBFFLRR
BFFFBBBRLR
FFBBFFBLRR
BBFBBFBLLL
BFFBBFBRLL
FBFBBFFLLL
FBFBBFBLRR
BBFFBFFLLR
BFBBBBFRLL
FFBBFFBLRL
BBFBFBBLRR
BFBFFBBLRR
BFBFBBFRRL
BFFBBBBRRL
BFFBFFBRLR
BFFBFFFRLR
FBFBFFBRLL
FFBFFFBLRL
BFFFBBFLRL
FBBBFFBLLR
BFFBFFFLRR
BBBFFBBLLR
BBFBBFBLRR
FBBFFBFLLL
FFBBBBFRLR
BFFFBFBRLL
BFFBBBBLRL
FBBBBBBLLR
FFBBFBFLLL
FBBFBFBRLL
BFFFFBBLLL
FBFBFFFLLL
FBBBBFFLRR
FBFBBFBRRL
BFFBFFFLLL
BBFFFFBLLR
BFFBFBBRRR
BFBBBBBLLL
FBBBBBFRLR
FFFBBFFLLL
BBBFFFFLRR
FBBFFBBRRL
FFFBBFBRRR
FBFBBFFRRL
FBBFFBFRRR
FBBBBBBRRR
FBFBBBBRLL
FBBFBFBLLR
FBBBFFFLLR
FFBFFFFRLL
FBBBBFBRRL
BFFFFBFLRL
BBFFBBBLRR
BFBFFFBRRR
BFBFFBBRRR
FFBFFBBRRL
FBBBFBBRLR
FBBBBBBLLL
BFBBBBFRLR
BFBBFFFRLR
FBBBFBFRRL
BFFFBFBLRL
BFFFBFBLLR
FBFBFFBLLL
FBBFBFBRRL
BFBFFFFLLR
BBFBBBFRRL
BBFBFBFRRL
BFBFBBFRLL
FBBFBBBLRL
FBBBFBBRRL
FBBBFFBRLL
BFBFBBBRRR
BFBFBFFRLL
FBFBBBFLLR
FBFFBBBRRL
BFFBBBBRLL
BBFFBFFRLL
FFBFBFBRRR
BFBFBFFLLR
FBFFBBBRRR
FBBFBBFRRL
BFBFFFBLRR
BFFBFBBLRR
BBFBBBBLRR
FBFFFBFLRR
BFBBBFFRLL
BFFFFFFLLL
BBFFBFBLLR
FBBFBBFLLL
FBFBFBFLLR
FBFFFBFLLL
BBFFBFBLLL
BFFBFFBLRR
BFFFFBBRLL
BBFFBBFRLR
BBBFFBBLLL
BBFBBBFLLR
BBFBBBBLRL
BFFBBFFLLL
BFFFFBBLRR
BFBFBBFLLR
FFBFBFBLRL
FFBBFFFLRL
FFBBFBBRRL
FBBFFFFRRR
BFBFFFFLLL
BBFFFFFRLL
BBFFBBFLLL
FBFBBBFLLL
FFFBBBFRRR
BFBFBBFRRR
FFBBBBBRRL
FFBFBBFLLL
BFBFBFBRLL
BBFBFFBRLL
BFFFFFFRRL
FBFFBBFRRR
FFBFFFFLRR
FBFFFFBLRR
FBBFBBBLRR
BFBBFBFLRR
BBFBBFFRLR
FBFFFFBRRR
FFBBBFFRLL
BFBFBBFLRR
BFFBBFFRLR
BBFFFFBRLL
FBFBBBFRLR
FBFBFFBRLR
FFBBBFFLLR
BFBBFFBRLR
BFBFBFFRRR
FFBBFFBRLL
FFBFFBFLLR
BBFFBBFLRL
FBBBFBBLRR
FBBFBBFRLL
FFBBBFBRRR
BBBFFFFLLR
FBFFBBBLRL
FBFBFBFLRR
BBFFFFFLLR
FBFFFFFRLR
FBBFFFFLRL
FBBFFFFLRR
BBFFBFBRLL
BBBFFBFLRL
BBFFBFBLRR
FBBBFBFLRL
BFBBBBFRRR
FBBBFFFRRR
FBFFFBBLLL
BFBFBBBLLR
BFFFFFBRLL
FFBBBFBLLR
BFFFBFFRLL
FBFFFBBRLL
BFBFBFFRLR
FFBBFBBLRR
BFBFBFFLRL
BFFFFFBRLR
BFBFBBFLRL
BFFFFBFRLL
FBBBFBFLLR
BFFBBFFLLR
FBBFFBFRRL
FBBBFFFRLR
FFBFFBBLRR
FFBBBBFLRR
FFBBBBFRRL
BBBFFFBRLL
BFFFBBFRRR
BBFBBFFRRR
BFFBBBBLLR
FFFBBFFLRL
BFBBFFBLLL
FBBBBFBRLL
FBBFBBFRRR
BBFFFFFLLL
FFBFFFBRLR
BFFBFBBLLR
BFBBFFFRRR
BFBBBBBLLR
FFBBBBBRRR
BFBBBBFLLL
BFFBBBFLRR
BFFBFBFLLL
FBBFFBBRRR
FFBBFBFRLL
BBFFFFBRRR
FFBFFFFRLR
FFFBBBFLLR
FFBBFFFRLR
BFFBBFFLRR
FFBBFFFLLR
BFBBBFFLLL
FBBBBFBRLR
FBFBBFFLLR
FFBFBFFLLR
BFBFFFBLLR
BFBFFFFLRR
BFFFFFBRRR
FFBFBFFLRL
BFFBFFFLRL
BFFBFBBRRL
BFBBFFFRLL
BFBBBFBLLL
FBBFBFFRLL
FFBBFFFRLL
BFFBFFBRRL
BFBBFBBRLR
FBFFFFBLLL
BBFBFBFLLL
FBBBFBBLRL
BFBBBFBLLR
FFBFBFFRLR
BFBBFBBLRL
BFBFBFBLLR
FBBBFFFLRR
FBFFBBFRLR
FBFFBBFRRL
FFFBBFFLLR
FFBBBFBRLR
FBFBFFBLLR
BFBFBBBRRL
BFFBBBFLLL
FBBFFBFLRL
FBFBFFBLRR
FFBFFBBRLR
BFFFBFFRRR
BBFFFBBLLR
FBBFFBFLRR
FFFBBBFLRL
FBFFBBBRLR
FFFBBBBRLL
FBFFFFBLRL
BFFFFFFRLR
FFBBBBBRLR
FFBBFBFRRR
FBFFBFFRLR
FBFFBFBRRL
FFBFBBBRRR
FFBBBFFLLL
FBFFFBBRRR
FFFBBBFLLL
BFFFFFBLLL
BFBBBBBLRR
BFFFBBBRLL
BFBFFBBLLL
FBFBFBFLRL
BBFFFFFLRL
FFBBFFFLRR
FBFBBBFLRR
FBBFFBBRLL
FBBBFFFRRL
BFFFBBBLLL
FFBFFFBRLL
FBBBBBBRLL
BFBBBBFLRR
FFFBBBBLRR
FFBFFFBLLL
BFFBFBBRLL
BBFFFFBRLR
FBBFBBFRLR
BFFBBBBLRR
FBFFBBFRLL
FBFFFFFRRL
FBBBBFFRLR
BFBFBFFRRL
FBFFFFFRLL
FFBFFFFRRR
FBBBBBFRLL
FFBFFFBRRR
FFBFFBFRRR
BFFFBFBRRL
FBBBBFBRRR
BFFFFBFRRL
FBBFBFBLRR
BFFBBFBRLR
FBBBBBFLRR
BBFBBFBLRL
BFBBBBFRRL
BBFFBBFRRR
FBFBFFBLRL
BBBFFBBLRL
BFBBFBBLRR
FFBFBBBLRR
BBBFFBBLRR
FFBFBFFLLL
FBFBFBBLLR
BFFFBBFLLL
BBFBFBFLRL
BBFFFFFRRL
FFBFFFBLLR
BFFFFFFLRL
BBBFFFBRRR
FBFFBFFLLL
FFBBBBBLLL
BBFBBBFRLR
FFFBBFBLRL
BFFBFBBLLL
BFBFBBBLLL
FBFBBFBLLL
FFBFBBFLRL
FBBFFFBLLR
BFFBBBFRLL
FBFBBFBLLR
FFBFFFFLLL
FBBBBFBLRL
FFBFBBBRRL
FBFFFBFRRL
FBFFBBFLLL
BFBBFBBRRL
FFFBBBFRRL
BBFFFBFLRL
BFFBFFBLLL
BFBBFBFLLR
FBBFBBFLRR
BFBBBFFLRL
FBBFFFFLLL
BFBFBBFRLR
FBFBBBBLLR
FBBBFFFRLL
FFBFBFBLLL
FBBBBBFLLR
FFBBBFBLRR
FFBBFFBRRL
FBBBBBBLRR
FFBBBBBLRL
FFFBFBBRRL
FFBBBFFRRL
FBFBFBBRLR
FFBBFFFLLL
BBFBFBFRRR
BBFBFFBLRR
FBFBFBFRLL
FBFFBFBLRR
BBFBFFBLLL
FBBBFBBRRR
FBFBBFBLRL
FFBBFBFRLR
FBBBFBFRLL
BFFBFBFRRR
FBBBFFBRRR
BBFBBFBRLL
BBBFFBFRLL
FFBFFBBLRL
BFFFBBBLRR
BBFBBBFRLL
FBFFFBBLRR
FBFFFBBLRL
FBBBBBFLRL
BBFBFBBLRL
BBFFBBBLRL
BFFFFBBRRR
BFFBBBFRLR
FBBBFBBLLL
FBFBFBBRLL
BFBFBBBLRR
FFBFBFFLRR
FFBFFBFRRL
BFFBBFBLLL
BFFFBFFLLR
BFBBFFFLRL
FBBFFBBLRR
FBBBBBFRRR
FBBFBBBRLR
BFBFBBBRLL
FBFFFBBRRL
FBBBFFBRRL
BFBFFBFLLR
BBBFFFFRLL
FBFFFFFLRR
FBFFFFBRLR
BBFFBBFLLR
FBFBFFFRLL
BFBBFBFRRR
FBBBFFBLLL
BFBFFBFRLR
BFFBBFFRLL
FBFFBFFLLR
FBBFFBBLLR
BFBBBFFLLR
FBBBBBBRRL
BBFFBBBRRL
BBFBFFFRLL
FBBBFBFLRR
BFBBBBBRLR
BFFBFFBRLL
BFFFFBFLLR
FFBFFFFRRL
BFBFFFFRRL
FBBFBBBRRR
BFFBBFBRRL
FBFBBBBRRL
FBBBFBFRLR
FFFBBFBLRR
BFFFBFBLLL
BBFBBBFRRR
BFFBBFBLRR
FBFFBBFLLR
BBFFFBBLRR
BFBFFFFRLR
FBFFFBFRLL
FBFBFFFRRL
FFBBBBBLRR
FBBBBFBLRR
FFBBFBFRRL
BBBFFFBLLR
FFBFBBBRLR
FFFBBBFRLR
BFFFFFBLLR
FBBFBFBLLL
BBFFFBBLRL
FBFFBFBRLL
BFBFBFBRLR
BBFFFBFRRL
FFBFBBFLRR
FBBFFFBRLL
FBBBFBFRRR
FFBBBFFLRL
FBBFBBBLLR
FBBFBBBRLL
BBBFFBBRLR
FBBFFFFLLR
FBFBBBFRRR
FBFFFFFLLR
FBFBFFFLRL
BBBFFFBRRL
BFBBBFBRLL
FFBFBBFRRL
FFBBBBBRLL
BBFFBBBLLR
BBFBFBFLRR
FBBFFBBRLR
FFBFBBBLLR
FBFBBFFLRL
BFFFFFFRRR
FBFBBFFRLL
FFBFBBBLRL
BBFFFFBLRL
FBFFBFFRRR
FFFBBFBLLL
BBBFFBFRRL
FBFFBFFRLL
FBBBBBFRRL
BBFFFBFLLL
FFBFFBFLRR
BBFFFBBLLL
FBBFFBBLRL
FBBFFFBLLL
BBFBBFBLLR
FFBBFBBRLR
FBBFFBFLLR
BBFBFBFRLR
BFFFFFFLLR
FBFFFBFRLR
BFBFFFBRRL
FFBFBBBLLL
FBFBBBBRLR
BFFBFBFLRR
BBFBBFBRRL
FFBBFFBLLL
BFBFBFBLRL
FFFBBFFRLL
FBFBFBBRRL
FFBBBFFLRR
BFBBBFBRRL
FBFBBBBRRR
BFBBBFFRRL
FBFFFFFLRL
BBFBFBFRLL
FFBFFFFLRL
FFFBBBBRLR
FFBFBBBRLL
FBFBFBBLLL
BFBBBFBLRR
FBFFBBBLLR
FFFBBBBRRL
FBBBBFFLLR
FBBBFFFLLL
BBFFFBBRRL
BFBBBFBLRL
FBBFFFBLRR
FBFFFFFLLL
BFBBBBBRRL
BBBFFBFLLL
FBBBBFFRRR
FBBFFFFRLR
FBFFFBBLLR
FBBFBBFLLR
FBFBBFFLRR
FBBFBFFLLL
BBFBBFFRRL
BBFBFBBRRR
BFFBBBFLLR
BFBFFFBRLL
BBBFFFFRRR
FFBFFFBRRL
FFBBFBBRRR
BBFFFFFRLR
BFFFBBFRRL
BBFFBFBRRL
BBBFFFFLRL
BBFFFBFLRR
FBFFBFBRLR
BBFFBFFRRR
BFBFBFBRRL
BFFBFFBRRR
FBBFBBBLLL
FBFFBFBLLR
BBFBFFFLLL
FFBFBFFRRR
BFBFFBBRLL
BBFFFBFLLR
FFBBFBFLRL
BFBFBBBRLR
FBFBBFBRRR
FBFBBBBLLL
BBFBFBFLLR
BFBFFBBRLR
BFFFBFFLLL
FBFFBBBLLL
FBBBBFFLRL
FFFBBBFLRR
BBFFBFBRRR
BBFBFFBLLR
FFFBBFBRRL`


/**
 * separarDiv - Se separa cada linea en un elemento de un arreglo
 *
 * @param  {string} txt el texto de entrada con saltos de linea
 * @return {array[string]}     un arreglo en donde cada elemento es un reglon de la entrada
 */
function separarDiv(txt) {
    txt += "\n"
    var salida = []
    var palabra = ""
    for (var i = 0; i < txt.length; i++) {
        if (txt[i] !== "\n") {
            palabra += txt[i]
        } else {
            salida.push(palabra)
            palabra = ""
        }
    }
    return salida
}
/**
 * sanitizarArreglo - se valida que cada palabra del arreglo cumpla con que las primeras 7 letras seran o bien B o F las 3 restantes sean L o R
 *
 * @param  {array[string]} arregloDiv el arreglo con las palabras
 * @return {boolean}            si el conjunto de datos es valido o no
 */
function sanitizarArreglo(arregloDiv) {
    var sanitizarPalabra = function(palabra) {
        for (var i = 0; i < palabra.length; i++) {
            if (i <= 6) {
                if (palabra[i] !== "B" && palabra[i] !== "F") {
                    return false;
                }
            } else if (i >= 7 && i <= 9) {
                if (palabra[i] !== "R" && palabra[i] !== "L") {
                    return false;
                }
            } else {
                return false;
            }
        }
        return true;
    }
    var conjuntoValido = true;
    for (var i = 0; i < arregloDiv.length; i++) {
        if (sanitizarPalabra(arregloDiv[i]) === false) {
            console.log("Palabra invalida: " + arregloDiv[i])
            return false;
        }
    }
    return true;
}

function calcularID(palabra) {
    var getFilaCodificada = function(pa) {
        var salida = ""
        for (var i = 0; i <= 6; i++) {
            salida += pa[i]
        }
        return salida
    }
    var getSillaCodificada = function(pa) {
        var salida = ""
        for (var i = 7; i <= 9; i++) {
            salida += pa[i]
        }
        return salida
    }
    var calcularFila = function(filaCodificada) {
        var acotado = [0, 127]
        for (var i = 0; i < filaCodificada.length; i++) {
            if (filaCodificada[i] === "F") {
                let nuevoLimite = ((acotado[1] - acotado[0]) / 2);
                acotado[1] = Math.floor(acotado[1] - nuevoLimite);
            } else if (filaCodificada[i] === "B") {
                let nuevoLimite = ((acotado[1] - acotado[0]) / 2);
                acotado[0] = Math.ceil(acotado[0] + nuevoLimite);
            }
        }
        if (acotado[0] === acotado[1]) {
            return acotado[0]
        }
        return null
    }
    var calcularSilla = function(sillaCodificada) {
        var acotado = [0, 7]
        for (var i = 0; i < sillaCodificada.length; i++) {
            if (sillaCodificada[i] === "L") {
                let nuevoLimite = ((acotado[1] - acotado[0]) / 2);
                acotado[1] = Math.floor(acotado[1] - nuevoLimite);
            } else if (sillaCodificada[i] === "R") {
                let nuevoLimite = ((acotado[1] - acotado[0]) / 2);
                acotado[0] = Math.ceil(acotado[0] + nuevoLimite);
            }
        }
        if (acotado[0] === acotado[1]) {
            return acotado[0]
        }
        return null
    }
    return calcularFila(getFilaCodificada(palabra)) * 8 + calcularSilla(getSillaCodificada(palabra))

}

function calcularIds(arregloPasp) {
    var arreglo = separarDiv(real)
    var ids = []
    if (sanitizarArreglo(arreglo)) {
        for (var i = 0; i < arreglo.length; i++) {
            let idAct = calcularID(arreglo[i]);
            ids.push(idAct)
        }
    } else {
        return "DATASET CORRUPTO"
    }
    return ids
}

function main(entrada) {
    var ids = calcularIds(entrada);
    /*Organizar*/
    // Algoritmo de burbuja
    for (let k = 1; k < ids.length; k++) {
        for (let i = 0; i < (ids.length - k); i++) {
            if (ids[i] > ids[i + 1]) {
                let aux = ids[i];
                ids[i] = ids[i + 1];
                ids[i + 1] = aux;
            }
        }
    }
    var idInicial = ids[0]
    for (var i = 0; i < ids.length; i++) {
        if (ids[i] != idInicial) {
            console.log(idInicial)
            idInicial++;
        }
        idInicial++;

    }


}


main(real);
